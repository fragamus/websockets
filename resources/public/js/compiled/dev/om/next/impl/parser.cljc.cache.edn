;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name om.next.impl.parser, :imports nil, :requires {set clojure.set, clojure.set clojure.set, util om.util, om.util om.util}, :uses nil, :defs {expr->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 113, :column 7, :end-line 113, :end-column 16, :arglists (quote ([x])), :doc "Given a query expression convert it into an AST."}, :name om.next.impl.parser/expr->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Given a query expression convert it into an AST."}, call->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 72, :column 7, :end-line 72, :end-column 16, :arglists (quote ([[f args :as call]]))}, :name om.next.impl.parser/call->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 16, :method-params ([p__35386]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[f args :as call]]))}, ast->expr {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 133, :column 7, :end-line 133, :end-column 16, :arglists (quote ([ast] [{:keys [type component], :as ast} unparse?])), :doc "Given a query expression AST convert it back into a query expression.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ast] [{:keys [type component], :as ast} unparse?]), :arglists ([ast] [{:keys [type component], :as ast} unparse?]), :arglists-meta (nil nil)}}, :name om.next.impl.parser/ast->expr, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ast] [{:keys [type component], :as ast} unparse?]), :arglists ([ast] [{:keys [type component], :as ast} unparse?]), :arglists-meta (nil nil)}, :method-params ([ast] [{:keys [type component], :as ast} unparse?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists ([ast] [{:keys [type component], :as ast} unparse?]), :doc "Given a query expression AST convert it back into a query expression."}, rethrow? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 235, :column 7, :end-line 235, :end-column 15, :arglists (quote ([x]))}, :name om.next.impl.parser/rethrow?, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, path-meta {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 165, :column 7, :end-line 165, :end-column 16, :arglists (quote ([data path query] [data path query union-expr])), :doc "Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([data path query] [data path query union-expr]), :arglists ([data path query] [data path query union-expr]), :arglists-meta (nil nil)}}, :name om.next.impl.parser/path-meta, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([data path query] [data path query union-expr]), :arglists ([data path query] [data path query union-expr]), :arglists-meta (nil nil)}, :method-params ([data path query] [data path query union-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 4, :fn-var true, :arglists ([data path query] [data path query union-expr]), :doc "Add path metadata to a data structure. data is the data to be worked on.\n   path is the current path into the data. query is the query used to\n   walk the data. union-expr tracks the last seen union query to be used\n   when it finds a recursive union."}, wrap-expr {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 126, :column 7, :end-line 126, :end-column 16, :arglists (quote ([root? expr]))}, :name om.next.impl.parser/wrap-expr, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 16, :method-params ([root? expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([root? expr]))}, join->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 89, :column 7, :end-line 89, :end-column 16, :arglists (quote ([join]))}, :name om.next.impl.parser/join->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 16, :method-params ([join]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([join]))}, keyword->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([k]))}, :name om.next.impl.parser/keyword->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, query->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 79, :column 7, :end-line 79, :end-column 17, :arglists (quote ([query])), :doc "Convert a query to its AST representation."}, :name om.next.impl.parser/query->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 17, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query])), :doc "Convert a query to its AST representation."}, ident->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 108, :column 7, :end-line 108, :end-column 17, :arglists (quote ([[k id :as ref]]))}, :name om.next.impl.parser/ident->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 17, :method-params ([p__35393]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k id :as ref]]))}, dispatch {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 294, :column 7, :end-line 294, :end-column 15, :arglists (quote ([_ k _]))}, :name om.next.impl.parser/dispatch, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 15, :method-params ([_ k _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ k _]))}, union-entry->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 57, :column 7, :end-line 57, :end-column 23, :arglists (quote ([[k v]]))}, :name om.next.impl.parser/union-entry->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 23, :method-params ([p__35383]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]]))}, parser {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 239, :column 7, :end-line 239, :end-column 13, :arglists (quote ([{:keys [read mutate], :as config}])), :doc "Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."}, :name om.next.impl.parser/parser, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 13, :method-params ([p__35442]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [read mutate], :as config}])), :doc "Given a :read and/or :mutate function return a parser. Refer to om.next/parser\n   for top level documentation."}, symbol->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([k]))}, :name om.next.impl.parser/symbol->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 18, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, union->ast {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/om/next/impl/parser.cljc", :line 67, :column 7, :end-line 67, :end-column 17, :arglists (quote ([m]))}, :name om.next.impl.parser/union->ast, :variadic false, :file "resources/public/js/compiled/dev/om/next/impl/parser.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:query-root :path :remote :children :union-key :read :key :union-entry :else :call * :value :params :ast :type :component :error/invalid-join :error/invalid-expression :om.next/abort :parser :root :result :prop :dispatch-key :om-path :action :target quote :query :om.next/error :union ... :mutate :om.next/root :join :elide-paths}, :order [:dispatch-key :key :type :prop :component :union-key :query :children :union-entry :union quote :target :remote :params :call :root :query-root :join ... :else :error/invalid-join :error/invalid-expression :om-path * :om.next/abort :read :mutate :elide-paths :parser :om.next/root :path :ast :value :action :result :om.next/error]}, :doc "\n   Generic query expression parsing and AST manipulation.\n\n   QUERY EXPRESSIONS\n\n   Query expressions are a variation on Datomic Pull Syntax\n   http://docs.datomic.com/pull.html more suitable for generic client/server\n   state transfer. It's important to note the Om Next query expression syntax is\n   *not* a strict superset of Datomic Pull.\n\n   A query expression is composed of EDN values. The grammar for query\n   expressions follows:\n\n   QueryRoot    := EdnVector(QueryExpr*)\n   QueryExpr    := (EdnKeyword | IdentExpr | ParamExpr | JoinExpr)\n   IdentExpr    := EdnVector2(Keyword, EdnValue)\n   ParamExpr    := EdnList2(QueryExpr | EdnSymbol, ParamMapExpr)\n   ParamMapExpr := EdnMap(Keyword, EdnValue)\n   JoinExpr     := EdnMap((Keyword | IdentExpr), (QueryRoot | UnionExpr | RecurExpr))\n   UnionExpr    := EdnMap(Keyword, QueryRoot)\n   RecurExpr    := ('... | Integer)\n\n   Note most apis in Om Next expect a QueryRoot not a QueryExpr.\n\n   QUERY EXPRESSION AST FORMAT\n\n   Given a QueryExpr you can get the AST via om.next.impl.parser/expr->ast.\n   The following keys can appear in the AST representation:\n\n   {:type         (:prop | :join | :call | :root | :union | :union-entry)\n    :key          (EdnKeyword | EdnSymbol | IdentExpr)\n    :dispatch-key (EdnKeyword | EdnSymbol)\n    :union-key    EdnKeyword\n    :query        (QueryRoot | RecurExpr)\n    :params       ParamMapExpr\n    :children     EdnVector(AST)\n    :component    Object}\n\n   :query and :params may or may not appear. :type :call is only for\n   mutations."}