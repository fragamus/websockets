;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name untangled.websockets.networking, :imports nil, :requires {t om.transit, untangled.websockets.transit-packer untangled.websockets.transit-packer, sente taoensso.sente, sente-transit taoensso.sente.packers.transit, log untangled.client.logging, ct cognitect.transit, untangled.client.impl.network untangled.client.impl.network, async cljs.core.async, cljs.core.async cljs.core.async, cognitect.transit cognitect.transit, taoensso.sente taoensso.sente, taoensso.sente.packers.transit taoensso.sente.packers.transit, tp untangled.websockets.transit-packer, untangled.client.logging untangled.client.logging, om om.next, om.next om.next, om.transit om.transit}, :uses {<! cljs.core.async, chan cljs.core.async, UntangledNetwork untangled.client.impl.network, >! cljs.core.async, cb-success? taoensso.sente, put! cljs.core.async}, :defs {router_ {:name untangled.websockets.networking/router_, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 13, :column 1, :end-line 13, :end-column 17, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 13, :column 10, :end-line 13, :end-column 17}}, stop-router! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([]))}, :name untangled.websockets.networking/stop-router!, :variadic false, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start-router! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([ch-recv msg-handler]))}, :name untangled.websockets.networking/start-router!, :variadic false, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :end-column 20, :method-params ([ch-recv msg-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch-recv msg-handler]))}, message-received {:name untangled.websockets.networking/message-received, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 26, :column 1, :end-line 26, :end-column 27, :doc "Multimethod to handle Sente `event-msg`s", :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 26, :column 11, :end-line 26, :end-column 27, :doc "Multimethod to handle Sente `event-msg`s"}}, push-received {:name untangled.websockets.networking/push-received, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 30, :column 1, :end-line 30, :end-column 24, :doc "Multimethod to handle push events", :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 30, :column 11, :end-line 30, :end-column 24, :doc "Multimethod to handle push events"}}, ChannelClient {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted untangled.client.impl.network/UntangledNetwork cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name untangled.websockets.networking/ChannelClient, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :end-column 25, :type true, :column 12, :internal-ctor true, :line 37, :record true, :end-line 37, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->ChannelClient {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 37, :column 12, :end-line 37, :end-column 25, :internal-ctor true, :factory :positional, :arglists (quote ([url send-fn callback global-error-callback req-params server-push parse-queue completed-app]))}, :name untangled.websockets.networking/->ChannelClient, :variadic false, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :end-column 25, :method-params ([url send-fn callback global-error-callback req-params server-push parse-queue completed-app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 37, :end-line 37, :max-fixed-arity 8, :fn-var true, :arglists (quote ([url send-fn callback global-error-callback req-params server-push parse-queue completed-app]))}, map->ChannelClient {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 37, :column 12, :end-line 37, :end-column 25, :internal-ctor true, :factory :map, :arglists (quote ([G__41631]))}, :name untangled.websockets.networking/map->ChannelClient, :variadic false, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :end-column 25, :method-params ([G__41631]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__41631]))}, make-channel-client {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :line 64, :column 7, :end-line 64, :end-column 26, :arglists (quote ([url & {:keys [global-error-callback req-params]}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url {:keys [global-error-callback req-params]})], :arglists ([url & {:keys [global-error-callback req-params]}]), :arglists-meta (nil)}}, :name untangled.websockets.networking/make-channel-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/websockets/networking.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url {:keys [global-error-callback req-params]})], :arglists ([url & {:keys [global-error-callback req-params]}]), :arglists-meta (nil)}, :method-params [(url {:keys [global-error-callback req-params]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists ([url & {:keys [global-error-callback req-params]}])}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{send-fn :ws :ch-recv callback :else :content :default :packer :api/server-push :parse-queue :send-message :api/parse :params :command :recur :type :chsk/state :topic :state :req-params :global-error-callback parse-queue :event :status :id req-params :url :completed-app global-error-callback :server-push :wrap-recv-evs? :?data :send-om-request :chsk :action :send-fn :hierarchy :body :callback url completed-app :chsk/handshake server-push}, :order [:hierarchy :id :default :topic :url :send-fn :callback :global-error-callback :req-params :server-push :parse-queue :completed-app :api/parse :action :command :content :send-message :send-om-request :ch-recv :state :event :?data :api/server-push :chsk/handshake :chsk/state url send-fn callback global-error-callback req-params server-push parse-queue completed-app :packer :type :params :wrap-recv-evs? :ws :chsk :recur :status :body :else]}, :doc nil}