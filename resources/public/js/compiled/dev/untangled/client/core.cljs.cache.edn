;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name untangled.client.core, :imports {Uri goog.Uri}, :requires {set clojure.set, goog.dom goog.dom, Uri goog.Uri, log untangled.client.logging, om.next.cache om.next.cache, untangled.client.impl.network untangled.client.impl.network, plumbing untangled.client.impl.om-plumbing, async cljs.core.async, untangled.client.impl.util untangled.client.impl.util, omp om.next.protocols, untangled.client.impl.application untangled.client.impl.application, cljs.core.async cljs.core.async, udom untangled.dom, clojure.set clojure.set, util untangled.client.impl.util, om.next.protocols om.next.protocols, gdom goog.dom, net untangled.client.impl.network, untangled.client.logging untangled.client.logging, om om.next, omc om.next.cache, untangled.client.impl.built-in-mutations untangled.client.impl.built-in-mutations, untangled.client.impl.om-plumbing untangled.client.impl.om-plumbing, om.next om.next, untangled.dom untangled.dom, app untangled.client.impl.application}, :uses nil, :defs {reset-history-impl {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 146, :column 7, :end-line 146, :end-column 25, :arglists (quote ([app])), :doc "Needed for mocking in tests. Use UntangledApplication protocol methods instead."}, :name untangled.client.core/reset-history-impl, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 25, :method-params ([app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app])), :doc "Needed for mocking in tests. Use UntangledApplication protocol methods instead."}, uri-params {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 219, :column 7, :end-line 219, :end-column 17, :arglists (quote ([] [url])), :doc "Get the current URI parameters from the browser url or one you supply", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [url]), :arglists ([] [url]), :arglists-meta (nil nil)}}, :name untangled.client.core/uri-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [url]), :arglists ([] [url]), :arglists-meta (nil nil)}, :method-params ([] [url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists ([] [url]), :doc "Get the current URI parameters from the browser url or one you supply"}, merge-alternate-union-elements! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 89, :column 8, :end-line 89, :end-column 39, :private true, :arglists (quote ([app root-component]))}, :private true, :name untangled.client.core/merge-alternate-union-elements!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 39, :method-params ([app root-component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app root-component]))}, mount {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 81, :column 4, :end-line 81, :end-column 9, :protocol untangled.client.core/UntangledApplication, :doc "Start/replace the webapp on the given DOM ID or DOM Node.", :arglists (quote ([this root-component target-dom-id]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/mount, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 9, :method-params ([this root-component target-dom-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this root-component target-dom-id])), :doc "Start/replace the webapp on the given DOM ID or DOM Node."}, initial-state {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 78, :column 4, :end-line 78, :end-column 17, :protocol untangled.client.core/InitialAppState, :doc "Get the initial state to be used for this component in app state. You are responsible for composing these together.", :arglists (quote ([clz params]))}, :protocol untangled.client.core/InitialAppState, :name untangled.client.core/initial-state, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 17, :method-params ([clz params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([clz params])), :doc "Get the initial state to be used for this component in app state. You are responsible for composing these together."}, merge-state! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 307, :column 7, :end-line 307, :end-column 19, :arglists (quote ([app-or-reconciler component object-data & named-parameters])), :doc "Normalize and merge a (sub)tree of application state into the application using a known UI component's query and ident.\n\n  This utility function obtains the ident of the incoming object-data using the UI component's ident function. Once obtained,\n  it uses the component's query and ident to normalize the data and place the resulting objects in the correct tables.\n  It is also quite common to want those new objects to be linked into lists in other spot in app state, so this function\n  supports optional named parameters for doing this. These named parameters can be repeated as many times as you like in order\n  to place the ident of the new object into other data structures of app state.\n\n  This function honors the data merge story for Untangled: attributes that are queried for but do not appear in the\n  data will be removed from the application. This function also uses the initial state for the component as a base\n  for merge if there was no state for the object already in the database.\n\n  This function will also trigger re-renders of components that directly render object merged, as well as any components\n  into which you integrate that data via the named-parameters.\n\n  This function is primarily meant to be used from things like server push and setTimeout/setInterval, where you're outside\n  of the normal mutation story. Do not use this function within abstract mutations.\n\n  - app-or-reconciler: The Untangled application or Om reconciler\n  - component: The class of the component that corresponsds to the data. Must have an ident.\n  - object-data: A map (tree) of data to merge. Will be normalized for you.\n  - named-parameter: Post-processing ident integration steps. see integrate-ident!\n\n  Any keywords that appear in ident integration steps will be added to the re-render queue.\n  ", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(app-or-reconciler component object-data named-parameters)], :arglists ([app-or-reconciler component object-data & named-parameters]), :arglists-meta (nil)}}, :name untangled.client.core/merge-state!, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(app-or-reconciler component object-data named-parameters)], :arglists ([app-or-reconciler component object-data & named-parameters]), :arglists-meta (nil)}, :method-params [(app-or-reconciler component object-data named-parameters)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 3, :fn-var true, :arglists ([app-or-reconciler component object-data & named-parameters]), :doc "Normalize and merge a (sub)tree of application state into the application using a known UI component's query and ident.\n\n  This utility function obtains the ident of the incoming object-data using the UI component's ident function. Once obtained,\n  it uses the component's query and ident to normalize the data and place the resulting objects in the correct tables.\n  It is also quite common to want those new objects to be linked into lists in other spot in app state, so this function\n  supports optional named parameters for doing this. These named parameters can be repeated as many times as you like in order\n  to place the ident of the new object into other data structures of app state.\n\n  This function honors the data merge story for Untangled: attributes that are queried for but do not appear in the\n  data will be removed from the application. This function also uses the initial state for the component as a base\n  for merge if there was no state for the object already in the database.\n\n  This function will also trigger re-renders of components that directly render object merged, as well as any components\n  into which you integrate that data via the named-parameters.\n\n  This function is primarily meant to be used from things like server push and setTimeout/setInterval, where you're outside\n  of the normal mutation story. Do not use this function within abstract mutations.\n\n  - app-or-reconciler: The Untangled application or Om reconciler\n  - component: The class of the component that corresponsds to the data. Must have an ident.\n  - object-data: A map (tree) of data to merge. Will be normalized for you.\n  - named-parameter: Post-processing ident integration steps. see integrate-ident!\n\n  Any keywords that appear in ident integration steps will be added to the re-render queue.\n  "}, get-class-ident {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 234, :column 7, :end-line 234, :end-column 22, :arglists (quote ([comp data])), :doc "Get the ident using a component class and data. Om's simulated statics are elided by\n  advanced compilation. This function compensates."}, :name untangled.client.core/get-class-ident, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 22, :method-params ([comp data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp data])), :doc "Get the ident using a component class and data. Om's simulated statics are elided by\n  advanced compilation. This function compensates."}, get-url-param {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 228, :column 7, :end-line 228, :end-column 20, :arglists (quote ([param-name] [url param-name])), :doc "Get the value of the named parameter from the browser URL (or an explicit one)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param-name] [url param-name]), :arglists ([param-name] [url param-name]), :arglists-meta (nil nil)}}, :name untangled.client.core/get-url-param, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([param-name] [url param-name]), :arglists ([param-name] [url param-name]), :arglists-meta (nil nil)}, :method-params ([param-name] [url param-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists ([param-name] [url param-name]), :doc "Get the value of the named parameter from the browser URL (or an explicit one)"}, reset-state! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 82, :column 4, :end-line 82, :end-column 16, :protocol untangled.client.core/UntangledApplication, :doc "Replace the entire app state with the given (pre-normalized) state.", :arglists (quote ([this new-state]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/reset-state!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Replace the entire app state with the given (pre-normalized) state."}, get-url {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 215, :column 7, :end-line 215, :end-column 14, :arglists (quote ([])), :doc "Get the current window location from the browser"}, :name untangled.client.core/get-url, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current window location from the browser"}, mount* {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 155, :column 7, :end-line 155, :end-column 13, :arglists (quote ([{:keys [mounted? initial-state reconciler-options], :as app} root-component dom-id-or-node]))}, :name untangled.client.core/mount*, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 13, :method-params ([p__44520 root-component dom-id-or-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [mounted? initial-state reconciler-options], :as app} root-component dom-id-or-node]))}, refresh {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 85, :column 4, :end-line 85, :end-column 11, :protocol untangled.client.core/UntangledApplication, :doc "Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work.", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/refresh, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Refresh the UI (force re-render). NOTE: You MUST support :key on your root DOM element with the :ui/react-key value from app state for this to work."}, refresh* {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 151, :column 7, :end-line 151, :end-column 15, :arglists (quote ([{:keys [reconciler], :as app}]))}, :name untangled.client.core/refresh*, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 15, :method-params ([p__44515]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [reconciler], :as app}]))}, integrate-ident! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 270, :column 7, :end-line 270, :end-column 23, :arglists (quote ([state ident & named-parameters])), :doc "Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not append\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element then that element must already exist in the vector.\n  ", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(state ident named-parameters)], :arglists ([state ident & named-parameters]), :arglists-meta (nil)}}, :name untangled.client.core/integrate-ident!, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(state ident named-parameters)], :arglists ([state ident & named-parameters]), :arglists-meta (nil)}, :method-params [(state ident named-parameters)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists ([state ident & named-parameters]), :doc "Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not append\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element then that element must already exist in the vector.\n  "}, component-merge-query {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 246, :column 8, :end-line 246, :end-column 29, :private true, :arglists (quote ([component object-data])), :doc "Calculates the query that can be used to pull (or merge) a component with an ident\n  to/from a normalized app database. Requires a tree of data that represents the instance of\n  the component in question (e.g. ident will work on it)"}, :private true, :name untangled.client.core/component-merge-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 29, :method-params ([component object-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component object-data])), :doc "Calculates the query that can be used to pull (or merge) a component with an ident\n  to/from a normalized app database. Requires a tree of data that represents the instance of\n  the component in question (e.g. ident will work on it)"}, clear-pending-remote-requests! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 84, :column 4, :end-line 84, :end-column 34, :protocol untangled.client.core/UntangledApplication, :doc "Remove all pending network requests. Useful on failures to eliminate cascading failures.", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/clear-pending-remote-requests!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 34, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Remove all pending network requests. Useful on failures to eliminate cascading failures."}, reset-history! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 87, :column 4, :end-line 87, :end-column 18, :protocol untangled.client.core/UntangledApplication, :doc "Returns the application with history reset to its initial, empty state. Resets application history to its initial, empty state. Suitable for resetting the app for situations such as user log out.", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/reset-history!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the application with history reset to its initial, empty state. Resets application history to its initial, empty state. Suitable for resetting the app for situations such as user log out."}, history {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 86, :column 4, :end-line 86, :end-column 11, :protocol untangled.client.core/UntangledApplication, :doc "Return a serialized version of the current history of the application, suitable for network transfer", :arglists (quote ([this]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/history, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a serialized version of the current history of the application, suitable for network transfer"}, ->Application {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 172, :column 12, :end-line 172, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([initial-state mutation-merge started-callback networking queue response-channel reconciler parser mounted? reconciler-options]))}, :name untangled.client.core/->Application, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :method-params ([initial-state mutation-merge started-callback networking queue response-channel reconciler parser mounted? reconciler-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 172, :end-line 172, :max-fixed-arity 10, :fn-var true, :arglists (quote ([initial-state mutation-merge started-callback networking queue response-channel reconciler parser mounted? reconciler-options]))}, map->Application {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 172, :column 12, :end-line 172, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__44533]))}, :name untangled.client.core/map->Application, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :method-params ([G__44533]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__44533]))}, UntangledApplication {:meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 80, :column 14, :end-line 80, :end-column 34, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {mount [[this root-component target-dom-id]], reset-state! [[this new-state]], reset-app! [[this root-component callback]], clear-pending-remote-requests! [[this]], refresh [[this]], history [[this]], reset-history! [[this]]}}}, :protocol-symbol true, :name untangled.client.core/UntangledApplication, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 34, :column 1, :line 80, :protocol-info {:methods {mount [[this root-component target-dom-id]], reset-state! [[this new-state]], reset-app! [[this root-component callback]], clear-pending-remote-requests! [[this]], refresh [[this]], history [[this]], reset-history! [[this]]}}, :info nil, :end-line 80, :impls #{untangled.client.core/Application}, :doc nil, :jsdoc ("@interface")}, reset-app! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 83, :column 4, :end-line 83, :end-column 14, :protocol untangled.client.core/UntangledApplication, :doc "Replace the entire app state with the initial app state defined on the root component (includes auto-merging of unions). callback can be nil, a function, or :original (to call original started-callback).", :arglists (quote ([this root-component callback]))}, :protocol untangled.client.core/UntangledApplication, :name untangled.client.core/reset-app!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 14, :method-params ([this root-component callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 83, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this root-component callback])), :doc "Replace the entire app state with the initial app state defined on the root component (includes auto-merging of unions). callback can be nil, a function, or :original (to call original started-callback)."}, clear-queue {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 139, :column 7, :end-line 139, :end-column 18, :arglists (quote ([queue])), :doc "Needed for mocking in tests. Do not use directly. Use UntangledApplication protocol methods instead."}, :name untangled.client.core/clear-queue, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 18, :method-params ([queue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([queue])), :doc "Needed for mocking in tests. Do not use directly. Use UntangledApplication protocol methods instead."}, initialize {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 114, :column 8, :end-line 114, :end-column 18, :private true, :arglists (quote ([{:keys [networking started-callback], :as app} initial-state root-component dom-id-or-node reconciler-options])), :doc "Initialize the untangled Application. Creates network queue, sets up i18n, creates reconciler, mounts it, and returns\n  the initialized app"}, :private true, :name untangled.client.core/initialize, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 18, :method-params ([p__44508 initial-state root-component dom-id-or-node reconciler-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 5, :fn-var true, :arglists (quote ([{:keys [networking started-callback], :as app} initial-state root-component dom-id-or-node reconciler-options])), :doc "Initialize the untangled Application. Creates network queue, sets up i18n, creates reconciler, mounts it, and returns\n  the initialized app"}, new-untangled-test-client {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 207, :column 7, :end-line 207, :end-column 32, :arglists (quote ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}])), :doc "Create a test client that has no networking. Useful for UI testing with a real Untangled app container.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :arglists-meta (nil)}}, :name untangled.client.core/new-untangled-test-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :arglists-meta (nil)}, :method-params [({:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [initial-state started-callback], :or {initial-state {}, started-callback nil}}]), :doc "Create a test client that has no networking. Useful for UI testing with a real Untangled app container."}, InitialAppState {:meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 77, :column 14, :end-line 77, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {initial-state [[clz params]]}}}, :protocol-symbol true, :name untangled.client.core/InitialAppState, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 29, :column 1, :line 77, :protocol-info {:methods {initial-state [[clz params]]}}, :info nil, :end-line 77, :impls #{}, :doc nil, :jsdoc ("@interface")}, preprocess-merge {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 255, :column 8, :end-line 255, :end-column 24, :private true, :arglists (quote ([state-atom component object-data])), :doc "Does the steps necessary to honor the data merge technique defined by Untangled with respect\n  to data overwrites in the app database."}, :private true, :name untangled.client.core/preprocess-merge, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 24, :method-params ([state-atom component object-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state-atom component object-data])), :doc "Does the steps necessary to honor the data merge technique defined by Untangled with respect\n  to data overwrites in the app database."}, Application {:num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable untangled.client.core/UntangledApplication cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name untangled.client.core/Application, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 172, :record true, :end-line 172, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, new-untangled-client {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/core.cljs", :line 20, :column 7, :end-line 20, :end-column 27, :arglists (quote ([& {:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}}])), :doc "Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  `:transit-handlers` (optional). A map with keys for `:read` and `:write`, which contain maps to be used for the read\n  and write side of transit to extend the supported data types. See `make-untangled-network` in network.cljs.\n\n  `:pathopt` (optional, defaults to true).  Turn on/off Om path optimization. This is here in case you're experiencing problems with rendering.\n  Path optimization is a rendering optimization that may still have bugs.\n\n  `:shared` (optional). A map of arbitrary values to be shared across all components, accessible to them via (om/shared this)\n\n  `:mutation-merge (optional). A function `(fn [state mutation-symbol return-value])` that receives the app state as a\n  map (NOT an atom) and should return the new state as a map. This function is run when network results are being merged,\n  and is called once for each mutation that had a return value on the server. Returning nil from this function is safe, and will be ignored\n  with a console message for debugging. If you need information about the original mutation arguments then you must reflect\n  them back from the server in your return value. By default such values are discarded.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}})], :arglists ([& {:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}}]), :arglists-meta (nil)}}, :name untangled.client.core/new-untangled-client, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}})], :arglists ([& {:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}}]), :arglists-meta (nil)}, :method-params [({:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [initial-state mutation-merge started-callback networking request-transform network-error-callback migrate pathopt transit-handlers shared], :or {initial-state {}, started-callback (constantly nil), network-error-callback (constantly nil), migrate nil, shared nil}}]), :doc "Entrypoint for creating a new untangled client. Instantiates an Application with default values, unless\n  overridden by the parameters. If you do not supply a networking object, one will be provided that connects to the\n  same server the application was served from, at `/api`.\n\n  If you supply a `:request-transform` it must be a function:\n\n  ```\n (fn [edn headers] [edn' headers'])\n  ```\n\n  it can replace the outgoing EDN or headers (returning both as a vector). NOTE: Both of these are clojurescript types.\n  The edn will be encoded with transit, and the headers will be converted to a js map.\n\n  `:initial-state` is your applications initial state. If it is an atom, it *must* be normalized. Untangled databases\n  always have normalization turned on (for server data merging). If it is not an atom, it will be auto-normalized.\n\n  `:started-callback` is an optional function that will receive the intiailized untangled application after it is\n  mounted in the DOM, and is useful for triggering initial loads, routing mutations, etc. The Om reconciler is available\n  under the `:reconciler` key (and you can access the app state, root node, etc from there.)\n\n  `:network-error-callback` is a function of two arguments, the app state atom and the error, which will be invoked for\n  every network error (status code >= 400, or no network found), should you choose to use the built-in networking record.\n\n  `:migrate` is optional. It is a (fn [state tid->rid] ... state') that should return a new state where all tempids\n  (the keys of `tid->rid`) are rewritten to real ids (the values of tid->rid). This defaults to a full recursive\n  algorithm against all data in the app-state, which is correct but possibly slow).  Note that tempids will have an Om tempid data type.\n  See Om reconciler documentation for further information.\n\n  `:transit-handlers` (optional). A map with keys for `:read` and `:write`, which contain maps to be used for the read\n  and write side of transit to extend the supported data types. See `make-untangled-network` in network.cljs.\n\n  `:pathopt` (optional, defaults to true).  Turn on/off Om path optimization. This is here in case you're experiencing problems with rendering.\n  Path optimization is a rendering optimization that may still have bugs.\n\n  `:shared` (optional). A map of arbitrary values to be shared across all components, accessible to them via (om/shared this)\n\n  `:mutation-merge (optional). A function `(fn [state mutation-symbol return-value])` that receives the app state as a\n  map (NOT an atom) and should return the new state as a map. This function is run when network results are being merged,\n  and is called once for each mutation that had a return value on the server. Returning nil from this function is safe, and will be ignored\n  with a console message for debugging. If you need information about the original mutation arguments then you must reflect\n  them back from the server in your return value. By default such values are discarded.\n\n  There is currently no way to circumvent the encoding of the body into transit. If you want to talk to other endpoints\n  via alternate protocols you must currently implement that outside of the framework (e.g. global functions/state).\n  "}}, :require-macros {om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{started-callback :untangled/meta initial-state :children reconciler-options :network-error-callback :pathopt :untangled/merge :networking :read :response-channel :mutation-merge :config :queue :mounted? :migrate :transit-handlers :steps :reconciler networking :original :command :history response-channel :type mutation-merge queue :component mounted? :global-error-callback :otherwise :merge-query :request-transform reconciler :parser :arg :merge-data :shared :started-callback parser :initial-state :query :union :reconciler-options :mutate :join}, :order [:started-callback :initial-state :network-error-callback :pathopt :networking :mutation-merge :transit-handlers :migrate :request-transform :shared :reconciler-options :global-error-callback :children :join :type :component :query :union :read :mutate :queue :response-channel :parser :mounted? :reconciler :config :history :otherwise :original :steps :untangled/meta initial-state mutation-merge started-callback networking queue response-channel reconciler parser mounted? reconciler-options :untangled/merge :merge-query :merge-data :command :arg]}, :doc nil}