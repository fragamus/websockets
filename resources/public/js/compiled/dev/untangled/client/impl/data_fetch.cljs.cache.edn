;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name untangled.client.impl.data-fetch, :imports nil, :requires {uuid cljs-uuid-utils.core, set clojure.set, log untangled.client.logging, cljs-uuid-utils.core cljs-uuid-utils.core, plumbing untangled.client.impl.om-plumbing, om.next.impl.parser om.next.impl.parser, omp om.next.protocols, udom untangled.dom, clojure.set clojure.set, m untangled.client.mutations, util om.util, om.next.protocols om.next.protocols, untangled.client.mutations untangled.client.mutations, op om.next.impl.parser, untangled.client.logging untangled.client.logging, om om.next, untangled.client.impl.om-plumbing untangled.client.impl.om-plumbing, om.next om.next, untangled.dom untangled.dom, clojure.walk clojure.walk, om.util om.util}, :uses {prewalk clojure.walk}, :defs {set-failed! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 310, :column 9, :end-line 310, :end-column 20, :arglists (quote ([state] [state params])), :doc "Returns a marker (based on the input state) that is in the error state", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/set-failed!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}, :method-params ([state] [state params]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state params]), :doc "Returns a marker (based on the input state) that is in the error state"}, data-target {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 246, :column 7, :end-line 246, :end-column 18, :arglists (quote ([state])), :doc "Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."}, :name untangled.client.impl.data-fetch/data-target, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."}, mark-parallel-loading {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 54, :column 7, :end-line 54, :end-column 28, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, :name untangled.client.impl.data-fetch/mark-parallel-loading, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 28, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, failed? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 38, :column 9, :end-line 38, :end-column 16, :arglists (quote ([state])), :doc "Test if the given item is a data state marker in the failed state"}, :name untangled.client.impl.data-fetch/failed?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Test if the given item is a data state marker in the failed state"}, split-items-ready-to-load {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 107, :column 7, :end-line 107, :end-column 32, :arglists (quote ([items-ready-to-load]))}, :name untangled.client.impl.data-fetch/split-items-ready-to-load, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 32, :method-params ([items-ready-to-load]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items-ready-to-load]))}, data-state? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 24, :column 7, :end-line 24, :end-column 18, :arglists (quote ([state])), :doc "Test if the given bit of state is a data fetch state-tracking marker"}, :name untangled.client.impl.data-fetch/data-state?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Test if the given bit of state is a data fetch state-tracking marker"}, ready? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 32, :column 9, :end-line 32, :end-column 15, :arglists (quote ([state])), :doc "Test if the given item is a data state marker that is in the ready state"}, :name untangled.client.impl.data-fetch/ready?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Test if the given item is a data state marker that is in the ready state"}, ready-state {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 210, :column 7, :end-line 210, :end-column 18, :arglists (quote ([{:keys [ident field params without query post-mutation post-mutation-params fallback parallel refresh marker target], :or {without #{}, refresh [], marker true}}])), :doc "Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."}, :name untangled.client.impl.data-fetch/ready-state, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :method-params ([p__43748]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ident field params without query post-mutation post-mutation-params fallback parallel refresh marker target], :or {without #{}, refresh [], marker true}}])), :doc "Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."}, set-loading! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 305, :column 9, :end-line 305, :end-column 21, :arglists (quote ([state] [state params])), :doc "Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/set-loading!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}, :method-params ([state] [state params]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 305, :end-line 305, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state params]), :doc "Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)"}, elide-ast-nodes {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 174, :column 7, :end-line 174, :end-column 22, :arglists (quote ([{:keys [key union-key children], :as ast} elision-set])), :doc "Remove items from a query (AST) that have a key listed in the elision-set"}, :name untangled.client.impl.data-fetch/elide-ast-nodes, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([p__43742 elision-set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [key union-key children], :as ast} elision-set])), :doc "Remove items from a query (AST) that have a key listed in the elision-set"}, data-marker? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 266, :column 7, :end-line 266, :end-column 19, :arglists (quote ([state])), :doc "Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."}, :name untangled.client.impl.data-fetch/data-marker?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."}, data-path {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 280, :column 7, :end-line 280, :end-column 16, :arglists (quote ([state])), :doc "Get the app-state database path of the target of the load that the given data state marker is trying to load."}, :name untangled.client.impl.data-fetch/data-path, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the app-state database path of the target of the load that the given data state marker is trying to load."}, relocate-targeted-results {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 326, :column 7, :end-line 326, :end-column 32, :arglists (quote ([state-atom items])), :doc "For items that are manually targeted, move them in app state from their result location to their target location."}, :name untangled.client.impl.data-fetch/relocate-targeted-results, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 32, :method-params ([state-atom items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom items])), :doc "For items that are manually targeted, move them in app state from their result location to their target location."}, inject-query-params {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 184, :column 7, :end-line 184, :end-column 26, :arglists (quote ([ast params])), :doc "Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "}, :name untangled.client.impl.data-fetch/inject-query-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 26, :method-params ([ast params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ast params])), :doc "Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "}, mark-loading {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 118, :column 7, :end-line 118, :end-column 19, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, :name untangled.client.impl.data-fetch/mark-loading, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `callback-args` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."}, dedupe-by {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 80, :column 7, :end-line 80, :end-column 16, :arglists (quote ([keys-fn] [keys-fn coll])), :doc "Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([keys-fn] [keys-fn coll]), :arglists ([keys-fn] [keys-fn coll]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/dedupe-by, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([keys-fn] [keys-fn coll]), :arglists ([keys-fn] [keys-fn coll]), :arglists-meta (nil nil)}, :method-params ([keys-fn] [keys-fn coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists ([keys-fn] [keys-fn coll]), :doc "Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided."}, error-callback {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 385, :column 8, :end-line 385, :end-column 22, :private true, :arglists (quote ([reconciler])), :doc "Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:untangled/server-error)\n  - Refreshes UI\n  "}, :private true, :name untangled.client.impl.data-fetch/error-callback, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:untangled/server-error)\n  - Refreshes UI\n  "}, loading? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 35, :column 9, :end-line 35, :end-column 17, :arglists (quote ([state])), :doc "Test if the given item is a data state marker in the loading state"}, :name untangled.client.impl.data-fetch/loading?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Test if the given item is a data state marker in the loading state"}, data-field {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 260, :column 7, :end-line 260, :end-column 17, :arglists (quote ([state])), :doc "Get the target field (if any) from the data state marker"}, :name untangled.client.impl.data-fetch/data-field, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the target field (if any) from the data state marker"}, data-exclusions {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 293, :column 7, :end-line 293, :end-column 22, :arglists (quote ([state])), :doc "Get the keywords that should be (recursively) removed from the query that will be sent to the server."}, :name untangled.client.impl.data-fetch/data-exclusions, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the keywords that should be (recursively) removed from the query that will be sent to the server."}, data-refresh {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 269, :column 7, :end-line 269, :end-column 19, :arglists (quote ([state])), :doc "Get the list of query keywords that should be refreshed (re-rendered) when this load completes."}, :name untangled.client.impl.data-fetch/data-refresh, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the list of query keywords that should be refreshed (re-rendered) when this load completes."}, mark-ready {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 238, :column 7, :end-line 238, :end-column 17, :arglists (quote ([{:keys [state], :as config}])), :doc "Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load-data` and `load-field` functions in `untangled.client.data-fetch` for the public API."}, :name untangled.client.impl.data-fetch/mark-ready, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([p__43755]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [state], :as config}])), :doc "Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load-data` and `load-field` functions in `untangled.client.data-fetch` for the public API."}, data-query-key {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 272, :column 7, :end-line 272, :end-column 21, :arglists (quote ([state])), :doc "Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"}, :name untangled.client.impl.data-fetch/data-query-key, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"}, make-data-state {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 151, :column 7, :end-line 151, :end-column 22, :arglists (quote ([type] [type params])), :doc "This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type params]), :arglists ([type] [type params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/make-data-state, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([type] [type params]), :arglists ([type] [type params]), :arglists-meta (nil nil)}, :method-params ([type] [type params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists ([type] [type params]), :doc "This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed."}, get-ready-query {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 162, :column 7, :end-line 162, :end-column 22, :arglists (quote ([state])), :doc "Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."}, :name untangled.client.impl.data-fetch/get-ready-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."}, data-uuid {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 263, :column 7, :end-line 263, :end-column 16, :arglists (quote ([state])), :doc "Get the UUID of the data fetch"}, :name untangled.client.impl.data-fetch/data-uuid, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the UUID of the data fetch"}, set-ready! {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 301, :column 9, :end-line 301, :end-column 19, :arglists (quote ([state] [state params])), :doc "Returns a state (based on the input state) that is in the 'ready' to load state.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}}, :name untangled.client.impl.data-fetch/set-ready!, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state params]), :arglists ([state] [state params]), :arglists-meta (nil nil)}, :method-params ([state] [state params]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 301, :end-line 301, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state params]), :doc "Returns a state (based on the input state) that is in the 'ready' to load state."}, place-load-markers {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 42, :column 8, :end-line 42, :end-column 26, :private true, :arglists (quote ([state-atom items-to-load])), :doc "Place load markers in the app state at their data paths so that UI rendering can see them."}, :private true, :name untangled.client.impl.data-fetch/place-load-markers, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 26, :method-params ([state-atom items-to-load]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom items-to-load])), :doc "Place load markers in the app state at their data paths so that UI rendering can see them."}, set-global-loading {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 320, :column 8, :end-line 320, :end-column 26, :private true, :arglists (quote ([reconciler]))}, :private true, :name untangled.client.impl.data-fetch/set-global-loading, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 26, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler]))}, loaded-callback {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 343, :column 8, :end-line 343, :end-column 23, :private true, :arglists (quote ([reconciler])), :doc "Generates a callback that processes all of the post-processing steps once a remote load has completed. This includes:\n\n  - Marking the items that were queries for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Forcing a global re-render if post-mutations ran (may change in future versions)\n  "}, :private true, :name untangled.client.impl.data-fetch/loaded-callback, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 23, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Generates a callback that processes all of the post-processing steps once a remote load has completed. This includes:\n\n  - Marking the items that were queries for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Forcing a global re-render if post-mutations ran (may change in future versions)\n  "}, data-ident {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 250, :column 7, :end-line 250, :end-column 17, :arglists (quote ([state])), :doc "Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."}, :name untangled.client.impl.data-fetch/data-ident, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."}, data-query {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 254, :column 7, :end-line 254, :end-column 17, :arglists (quote ([state])), :doc "Get the query that will be sent to the server as a result of the given data state marker"}, :name untangled.client.impl.data-fetch/data-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the query that will be sent to the server as a result of the given data state marker"}, data-params {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 289, :column 7, :end-line 289, :end-column 18, :arglists (quote ([state])), :doc "Get the parameters that the user wants to add to the first join/keyword of the data fetch query."}, :name untangled.client.impl.data-fetch/data-params, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Get the parameters that the user wants to add to the first join/keyword of the data fetch query."}, join-key-or-nil {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 100, :column 7, :end-line 100, :end-column 22, :arglists (quote ([expr]))}, :name untangled.client.impl.data-fetch/join-key-or-nil, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 22, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, valid-types {:name untangled.client.impl.data-fetch/valid-types, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 149, :column 1, :end-line 149, :end-column 17, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 149, :column 6, :end-line 149, :end-column 17}}, full-query {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :line 316, :column 7, :end-line 316, :end-column 17, :arglists (quote ([items])), :doc "Composes together the queries of a sequence of data states into a single query."}, :name untangled.client.impl.data-fetch/full-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/data_fetch.cljs", :end-column 17, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "Composes together the queries of a sequence of data states into a single query."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:ui/react-key :children :union-key :untangled.client.impl.data-fetch/post-mutation :ready :untangled.client.impl.data-fetch/parallel :untangled.client.impl.data-fetch/marker :key :refresh :callback-args :ui/fetch-state :parallel :fallback :marker :on-load :params :field :untangled.client.impl.data-fetch/without :state :post-mutation :otherwise :untangled.client.impl.data-fetch/params :without :untangled.client.impl.data-fetch/type :untangled.client.impl.data-fetch/ident :untangled/server-error :loading :untangled.client.impl.data-fetch/post-mutation-params :untangled.client.impl.data-fetch/fallback :ident :dispatch-key :untangled.client.impl.data-fetch/query :untangled/force-root :untangled/loads-in-progress :post-mutation-params :om.next/ready-to-load :action :untangled.client.impl.data-fetch/field :error :ui/loading-data :untangled.client.impl.data-fetch/refresh :target :on-error :query :items-to-load :untangled.client.impl.data-fetch/target :untangled.client.impl.data-fetch/uuid :always :failed}, :order [:untangled.client.impl.data-fetch/type :ready :loading :failed :ui/fetch-state :untangled/loads-in-progress :om.next/ready-to-load :untangled.client.impl.data-fetch/parallel :ui/loading-data :query :on-load :on-error :callback-args :untangled.client.impl.data-fetch/params :items-to-load :key :union-key :children :dispatch-key :params :target :refresh :parallel :fallback :marker :field :post-mutation :without :ident :post-mutation-params :untangled.client.impl.data-fetch/post-mutation :untangled.client.impl.data-fetch/marker :untangled.client.impl.data-fetch/ident :untangled.client.impl.data-fetch/post-mutation-params :untangled.client.impl.data-fetch/fallback :untangled.client.impl.data-fetch/query :untangled.client.impl.data-fetch/field :untangled.client.impl.data-fetch/refresh :untangled.client.impl.data-fetch/target :untangled.client.impl.data-fetch/uuid :state :otherwise :untangled.client.impl.data-fetch/without :always :action :untangled/force-root :untangled/server-error :error :ui/react-key]}, :doc nil}