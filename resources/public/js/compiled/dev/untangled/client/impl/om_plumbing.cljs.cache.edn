;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name untangled.client.impl.om-plumbing, :imports nil, :requires {log untangled.client.logging, i18n untangled.i18n.core, clojure.zip clojure.zip, om.next.impl.parser om.next.impl.parser, async cljs.core.async, walk clojure.walk, cljs.core.async cljs.core.async, untangled.i18n.core untangled.i18n.core, m untangled.client.mutations, util om.util, untangled.client.mutations untangled.client.mutations, op om.next.impl.parser, untangled.client.logging untangled.client.logging, om om.next, om.next om.next, zip clojure.zip, clojure.walk clojure.walk, om.util om.util}, :uses nil, :defs {postwalk {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 136, :column 7, :end-line 136, :end-column 15, :arglists (quote ([f form]))}, :name untangled.client.impl.om-plumbing/postwalk, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 15, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form]))}, add-meta-to-recursive-queries {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 142, :column 7, :end-line 142, :end-column 36, :arglists (quote ([q]))}, :name untangled.client.impl.om-plumbing/add-meta-to-recursive-queries, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 36, :method-params ([q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([q]))}, rewrite-tempids-in-request-queue {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 69, :column 7, :end-line 69, :end-column 39, :arglists (quote ([queue tempid-map])), :doc "Rewrite any pending requests in the request queue to account for the fact that a response might have\n  changed ids that are expressed in the mutations of that queue. tempid-map MUST be a map from om\n  tempid to real ids, not idents."}, :name untangled.client.impl.om-plumbing/rewrite-tempids-in-request-queue, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 39, :method-params ([queue tempid-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([queue tempid-map])), :doc "Rewrite any pending requests in the request queue to account for the fact that a response might have\n  changed ids that are expressed in the mutations of that queue. tempid-map MUST be a map from om\n  tempid to real ids, not idents."}, nf {:name untangled.client.impl.om-plumbing/nf, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 122, :column 1, :end-line 122, :end-column 8, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 122, :column 6, :end-line 122, :end-column 8}}, read-local {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([{:keys [query target state ast]} dkey _])), :doc "Read function for the Om parser.\n\n  *** NOTE: This function only runs when it is called without a target -- it is not triggered for remote reads. To\n  trigger a remote read, use the `untangled/data-fetch` namespace. ***\n\n  Returns the current locale when reading the :ui/locale keyword. Otherwise pulls data out of the app-state.\n  "}, :name untangled.client.impl.om-plumbing/read-local, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 17, :method-params ([p__43583 dkey _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [query target state ast]} dkey _])), :doc "Read function for the Om parser.\n\n  *** NOTE: This function only runs when it is called without a target -- it is not triggered for remote reads. To\n  trigger a remote read, use the `untangled/data-fetch` namespace. ***\n\n  Returns the current locale when reading the :ui/locale keyword. Otherwise pulls data out of the app-state.\n  "}, mark-missing {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 181, :column 7, :end-line 181, :end-column 19, :arglists (quote ([result query])), :doc "Recursively walk the query and response marking anything that was *asked for* in the query but is *not* in the response as missing.\n  The merge process (which happens later in the plumbing) looks for these markers as indicators to remove any existing\n  data in the database (which has provably disappeared).\n\n  The naive approach to data merging (even recursive) would fail to remove such data.\n\n  Returns the result with missing markers in place (which are then used/removed in a later stage)."}, :name untangled.client.impl.om-plumbing/mark-missing, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 19, :method-params ([result query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([result query])), :doc "Recursively walk the query and response marking anything that was *asked for* in the query but is *not* in the response as missing.\n  The merge process (which happens later in the plumbing) looks for these markers as indicators to remove any existing\n  data in the database (which has provably disappeared).\n\n  The naive approach to data merging (even recursive) would fail to remove such data.\n\n  Returns the result with missing markers in place (which are then used/removed in a later stage)."}, resolve-tempids {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 62, :column 7, :end-line 62, :end-column 22, :arglists (quote ([state tid->rid])), :doc "Replaces all om-tempids in app-state with the ids returned by the server."}, :name untangled.client.impl.om-plumbing/resolve-tempids, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 22, :method-params ([state tid->rid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state tid->rid])), :doc "Replaces all om-tempids in app-state with the ids returned by the server."}, walk {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 124, :column 7, :end-line 124, :end-column 11, :arglists (quote ([inner outer form]))}, :name untangled.client.impl.om-plumbing/walk, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 11, :method-params ([inner outer form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 3, :fn-var true, :arglists (quote ([inner outer form]))}, write-entry-point {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 36, :column 7, :end-line 36, :end-column 24, :arglists (quote ([env k params])), :doc "This is the Om entry point for writes. In general this is simply a call to the multi-method\n  defined by Untangled (mutate); however, Untangled supports the concept of a global `post-mutate`\n  function that will be called anytime the general mutate has an action that is desired. This\n  can be useful, for example, in cases where you have some post-processing that needs\n  to happen for a given (sub)set of mutations (that perhaps you did not define)."}, :name untangled.client.impl.om-plumbing/write-entry-point, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 24, :method-params ([env k params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env k params])), :doc "This is the Om entry point for writes. In general this is simply a call to the multi-method\n  defined by Untangled (mutate); however, Untangled supports the concept of a global `post-mutate`\n  function that will be called anytime the general mutate has an action that is desired. This\n  can be useful, for example, in cases where you have some post-processing that needs\n  to happen for a given (sub)set of mutations (that perhaps you did not define)."}, fallback-query {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 89, :column 7, :end-line 89, :end-column 21, :arglists (quote ([query resp]))}, :name untangled.client.impl.om-plumbing/fallback-query, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 21, :method-params ([query resp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([query resp]))}, is-ui-query-fragment? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 103, :column 8, :end-line 103, :end-column 29, :private true, :arglists (quote ([kw])), :doc "Check the given keyword to see if it is in the :ui namespace."}, :private true, :name untangled.client.impl.om-plumbing/is-ui-query-fragment?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 29, :method-params ([kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kw])), :doc "Check the given keyword to see if it is in the :ui namespace."}, prewalk {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 133, :column 7, :end-line 133, :end-column 14, :arglists (quote ([f form]))}, :name untangled.client.impl.om-plumbing/prewalk, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 14, :method-params ([f form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f form]))}, strip-ui {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 108, :column 7, :end-line 108, :end-column 15, :arglists (quote ([query])), :doc "Returns a new query with fragments that are in the `ui` namespace removed."}, :name untangled.client.impl.om-plumbing/strip-ui, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 15, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query])), :doc "Returns a new query with fragments that are in the `ui` namespace removed."}, recursive? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 139, :column 7, :end-line 139, :end-column 17, :arglists (quote ([qf]))}, :name untangled.client.impl.om-plumbing/recursive?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 17, :method-params ([qf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qf]))}, remove-loads-and-fallbacks {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 79, :column 7, :end-line 79, :end-column 33, :arglists (quote ([query])), :doc "Removes all untangled/load and tx/fallback mutations from the query"}, :name untangled.client.impl.om-plumbing/remove-loads-and-fallbacks, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 33, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query])), :doc "Removes all untangled/load and tx/fallback mutations from the query"}, leaf? {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 172, :column 7, :end-line 172, :end-column 12, :arglists (quote ([data])), :doc "Returns true iff the given data is marked as a leaf in the result (according to the query). Requires pre-marking."}, :name untangled.client.impl.om-plumbing/leaf?, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 12, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Returns true iff the given data is marked as a leaf in the result (according to the query). Requires pre-marking."}, as-leaf {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :line 165, :column 7, :end-line 165, :end-column 14, :arglists (quote ([data])), :doc "Returns data with meta-data marking it as a leaf in the result."}, :name untangled.client.impl.om-plumbing/as-leaf, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/om_plumbing.cljs", :end-column 14, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Returns data with meta-data marking it as a leaf in the result."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:untangled/leaf :children :key :else :map-entry? :ui/fetch-state :value :params untangled/load :ast :execute :state :untangled.client.impl.data-fetch/type :not-found :... :dispatch-key :action :error :depth :target :untangled.client.impl.om-plumbing/not-found :query ... tx/fallback}, :order [:query :target :state :ast :key :value :else :action untangled/load tx/fallback :children :dispatch-key :params :execute :error :untangled.client.impl.om-plumbing/not-found :map-entry? ... :depth :... :untangled/leaf :ui/fetch-state :untangled.client.impl.data-fetch/type :not-found]}, :doc nil}