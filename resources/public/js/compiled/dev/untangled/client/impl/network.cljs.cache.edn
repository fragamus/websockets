;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name untangled.client.impl.network, :imports {XhrIo goog.net.XhrIo, EventType goog.net.EventType}, :requires {t om.transit, log untangled.client.logging, ct cognitect.transit, EventType goog.net.EventType, cognitect.transit cognitect.transit, events goog.events, XhrIo goog.net.XhrIo, untangled.client.logging untangled.client.logging, str clojure.string, clojure.string clojure.string, goog.events goog.events, om.transit om.transit}, :uses nil, :defs {->MockNetwork {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 120, :column 12, :end-line 120, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([complete-app]))}, :name untangled.client.impl.network/->MockNetwork, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 23, :method-params ([complete-app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([complete-app]))}, response-ok {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 24, :column 4, :end-line 24, :end-column 15, :protocol untangled.client.impl.network/IXhrIOCallbacks, :doc "Called by XhrIo on OK", :arglists (quote ([this xhrio ok-cb]))}, :protocol untangled.client.impl.network/IXhrIOCallbacks, :name untangled.client.impl.network/response-ok, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 15, :method-params ([this xhrio ok-cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this xhrio ok-cb])), :doc "Called by XhrIo on OK"}, ->Network {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 40, :column 12, :end-line 40, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([url request-transform global-error-callback complete-app transit-handlers]))}, :name untangled.client.impl.network/->Network, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 19, :method-params ([url request-transform global-error-callback complete-app transit-handlers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 40, :end-line 40, :max-fixed-arity 5, :fn-var true, :arglists (quote ([url request-transform global-error-callback complete-app transit-handlers]))}, response-error {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 25, :column 4, :end-line 25, :end-column 18, :protocol untangled.client.impl.network/IXhrIOCallbacks, :doc "Called by XhrIo on ERROR", :arglists (quote ([this xhrio err-cb]))}, :protocol untangled.client.impl.network/IXhrIOCallbacks, :name untangled.client.impl.network/response-error, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 18, :method-params ([this xhrio err-cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this xhrio err-cb])), :doc "Called by XhrIo on ERROR"}, IXhrIOCallbacks {:meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 23, :column 14, :end-line 23, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {response-ok [[this xhrio ok-cb]], response-error [[this xhrio err-cb]]}}}, :protocol-symbol true, :name untangled.client.impl.network/IXhrIOCallbacks, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 29, :column 1, :line 23, :protocol-info {:methods {response-ok [[this xhrio ok-cb]], response-error [[this xhrio err-cb]]}}, :info nil, :end-line 23, :impls #{untangled.client.impl.network/Network}, :doc nil, :jsdoc ("@interface")}, MockNetwork {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted untangled.client.impl.network/UntangledNetwork cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name untangled.client.impl.network/MockNetwork, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 120, :record true, :end-line 120, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, UntangledNetwork {:meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 15, :column 14, :end-line 15, :end-column 30, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {send [[this edn ok-callback error-callback]], start [[this complete-app]]}}}, :protocol-symbol true, :name untangled.client.impl.network/UntangledNetwork, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 30, :column 1, :line 15, :protocol-info {:methods {send [[this edn ok-callback error-callback]], start [[this complete-app]]}}, :info nil, :end-line 15, :impls #{untangled.client.impl.network/MockNetwork untangled.client.impl.network/Network}, :doc nil, :jsdoc ("@interface")}, mock-network {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 128, :column 7, :end-line 128, :end-column 19, :arglists (quote ([]))}, :name untangled.client.impl.network/mock-network, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, Network {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection untangled.client.impl.network/IXhrIOCallbacks cljs.core/ICounted untangled.client.impl.network/UntangledNetwork cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name untangled.client.impl.network/Network, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 40, :record true, :end-line 40, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Network {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 40, :column 12, :end-line 40, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__37531]))}, :name untangled.client.impl.network/map->Network, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 19, :method-params ([G__37531]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__37531]))}, start {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 20, :column 4, :end-line 20, :end-column 9, :protocol untangled.client.impl.network/UntangledNetwork, :doc "Starts the network, passing in the app for any components that may need it.", :arglists (quote ([this complete-app]))}, :protocol untangled.client.impl.network/UntangledNetwork, :name untangled.client.impl.network/start, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 9, :method-params ([this complete-app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this complete-app])), :doc "Starts the network, passing in the app for any components that may need it."}, make-untangled-network {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 88, :column 7, :end-line 88, :end-column 29, :arglists (quote ([url & {:keys [request-transform global-error-callback transit-handlers]}])), :doc "TODO: This is PUBLIC API! Should not be in impl ns.\n\n  Build an Untangled Network object using the default implementation.\n\n  Features:\n\n  - Can configure the target URL on the server for Om network requests\n  - Can supply a (fn [{:keys [body headers] :as req}] req') to transform arbitrary requests (e.g. to add things like auth headers)\n  - Supports a global error callback (fn [status-code error] ) that is notified when a 400+ status code or hard network error occurs\n  - `transit-handlers`: A map of transit handlers to install on the reader, such as\n\n   `{ :read { \"thing\" (fn [wire-value] (convert wire-value))) }\n      :write { Thing (ThingHandler.) } }`\n\n   where:\n\n   (defrecord Thing [foo])\n\n   (deftype ThingHandler []\n     Object\n     (tag [_ _] \"thing\")\n     (rep [_ thing] (make-raw thing))\n     (stringRep [_ _] nil)))\n  ", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url {:keys [request-transform global-error-callback transit-handlers]})], :arglists ([url & {:keys [request-transform global-error-callback transit-handlers]}]), :arglists-meta (nil)}}, :name untangled.client.impl.network/make-untangled-network, :variadic true, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url {:keys [request-transform global-error-callback transit-handlers]})], :arglists ([url & {:keys [request-transform global-error-callback transit-handlers]}]), :arglists-meta (nil)}, :method-params [(url {:keys [request-transform global-error-callback transit-handlers]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists ([url & {:keys [request-transform global-error-callback transit-handlers]}]), :doc "TODO: This is PUBLIC API! Should not be in impl ns.\n\n  Build an Untangled Network object using the default implementation.\n\n  Features:\n\n  - Can configure the target URL on the server for Om network requests\n  - Can supply a (fn [{:keys [body headers] :as req}] req') to transform arbitrary requests (e.g. to add things like auth headers)\n  - Supports a global error callback (fn [status-code error] ) that is notified when a 400+ status code or hard network error occurs\n  - `transit-handlers`: A map of transit handlers to install on the reader, such as\n\n   `{ :read { \"thing\" (fn [wire-value] (convert wire-value))) }\n      :write { Thing (ThingHandler.) } }`\n\n   where:\n\n   (defrecord Thing [foo])\n\n   (deftype ThingHandler []\n     Object\n     (tag [_ _] \"thing\")\n     (rep [_ thing] (make-raw thing))\n     (stringRep [_ _] nil)))\n  "}, parse-response {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 27, :column 7, :end-line 27, :end-column 21, :arglists (quote ([xhr-io] [xhr-io read-handlers])), :doc "An XhrIo-specific implementation method for interpreting the server response.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xhr-io] [xhr-io read-handlers]), :arglists ([xhr-io] [xhr-io read-handlers]), :arglists-meta (nil nil)}}, :name untangled.client.impl.network/parse-response, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xhr-io] [xhr-io read-handlers]), :arglists ([xhr-io] [xhr-io read-handlers]), :arglists-meta (nil nil)}, :method-params ([xhr-io] [xhr-io read-handlers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists ([xhr-io] [xhr-io read-handlers]), :doc "An XhrIo-specific implementation method for interpreting the server response."}, make-xhrio {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([])), :doc "This is here (not inlined) to make mocking easier."}, :name untangled.client.impl.network/make-xhrio, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "This is here (not inlined) to make mocking easier."}, send {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 16, :column 4, :end-line 16, :end-column 8, :protocol untangled.client.impl.network/UntangledNetwork, :doc "Send method, transmits EDN to the server and gets an EDN response. Calls result-callback with that response,\n        or a map with key `:error` on errors. optional options may include `:headers`, but you may NOT override content\n        type. The method CANNOT be used for parallel network requests.", :arglists (quote ([this edn ok-callback error-callback]))}, :protocol untangled.client.impl.network/UntangledNetwork, :name untangled.client.impl.network/send, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 8, :method-params ([this edn ok-callback error-callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 16, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this edn ok-callback error-callback])), :doc "Send method, transmits EDN to the server and gets an EDN response. Calls result-callback with that response,\n        or a map with key `:error` on errors. optional options may include `:headers`, but you may NOT override content\n        type. The method CANNOT be used for parallel network requests."}, map->MockNetwork {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :line 120, :column 12, :end-line 120, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__37550]))}, :name untangled.client.impl.network/map->MockNetwork, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/network.cljs", :end-column 23, :method-params ([G__37550]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__37550]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{complete-app :read :else :transit-handlers :type :handlers :global-error-callback :headers transit-handlers :write :request-transform :url global-error-callback :error request-transform :network :body :complete-app url :message}, :order [:error :message :else :handlers :url :request-transform :global-error-callback :complete-app :transit-handlers :read :type :network :write :body :headers url request-transform global-error-callback complete-app transit-handlers]}, :doc nil}