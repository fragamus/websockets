;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name untangled.client.impl.application, :imports nil, :requires {log untangled.client.logging, i18n untangled.i18n.core, untangled.client.impl.network untangled.client.impl.network, plumbing untangled.client.impl.om-plumbing, async cljs.core.async, untangled.client.impl.data-fetch untangled.client.impl.data-fetch, cljs.core.async cljs.core.async, untangled.i18n.core untangled.i18n.core, net untangled.client.impl.network, untangled.client.logging untangled.client.logging, om om.next, untangled.client.impl.om-plumbing untangled.client.impl.om-plumbing, om.next om.next, f untangled.client.impl.data-fetch}, :uses nil, :defs {enqueue-mutations {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 35, :column 7, :end-line 35, :end-column 24, :arglists (quote ([{:keys [queue], :as app} remote-tx-map cb])), :doc "Splits out the (remote) mutations and fallbacks in a transaction, creates an error handler that can\n   trigger fallbacks, and enqueues the remote mutations on the network queue."}, :name untangled.client.impl.application/enqueue-mutations, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 24, :method-params ([p__43959 remote-tx-map cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [queue], :as app} remote-tx-map cb])), :doc "Splits out the (remote) mutations and fallbacks in a transaction, creates an error handler that can\n   trigger fallbacks, and enqueues the remote mutations on the network queue."}, sweep-merge {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 121, :column 7, :end-line 121, :end-column 18, :arglists (quote ([target source])), :doc "Do a recursive merge of source into target, but remove any target data that is marked as missing in the response. The\n  missing marker is generated in the source when something has been asked for in the query, but had no value in the\n  response. This allows us to correctly remove 'empty' data from the database without accidentally removing something\n  that may still exist on the server (in truth we don't know its status, since it wasn't asked for, but we leave\n  it as our 'best guess')"}, :name untangled.client.impl.application/sweep-merge, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 18, :method-params ([target source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([target source])), :doc "Do a recursive merge of source into target, but remove any target data that is marked as missing in the response. The\n  missing marker is generated in the source when something has been asked for in the query, but had no value in the\n  response. This allows us to correctly remove 'empty' data from the database without accidentally removing something\n  that may still exist on the server (in truth we don't know its status, since it wasn't asked for, but we leave\n  it as our 'best guess')"}, start-network-sequential-processing {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 77, :column 7, :end-line 77, :end-column 42, :arglists (quote ([{:keys [networking queue response-channel]}])), :doc "Starts a async go loop that sends network requests on a networking object's request queue. Must be called once and only\n  once for each active networking object on the UI. Each iteration of the loop pulls off a\n  single request, sends it, waits for the response, and then repeats. Gives the appearance of a separate networking\n  'thread' using core async."}, :name untangled.client.impl.application/start-network-sequential-processing, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 42, :method-params ([p__44023]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [networking queue response-channel]}])), :doc "Starts a async go loop that sends network requests on a networking object's request queue. Must be called once and only\n  once for each active networking object on the UI. Each iteration of the loop pulls off a\n  single request, sends it, waits for the response, and then repeats. Gives the appearance of a separate networking\n  'thread' using core async."}, initialize-internationalization {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 96, :column 7, :end-line 96, :end-column 38, :arglists (quote ([reconciler])), :doc "Configure a re-render when the locale changes. During startup this function will be called once for each\n  reconciler that is running on a page."}, :name untangled.client.impl.application/initialize-internationalization, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 38, :method-params ([reconciler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reconciler])), :doc "Configure a re-render when the locale changes. During startup this function will be called once for each\n  reconciler that is running on a page."}, fallback-handler {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 12, :column 7, :end-line 12, :end-column 23, :arglists (quote ([{:keys [reconciler]} query])), :doc "This internal function is responsible for generating and returning a function that can accomplish calling the fallbacks that\n  appear in an incoming Om transaction, which is in turn used by the error-handling logic of the plumbing."}, :name untangled.client.impl.application/fallback-handler, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 23, :method-params ([p__43927 query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [reconciler]} query])), :doc "This internal function is responsible for generating and returning a function that can accomplish calling the fallbacks that\n  appear in an incoming Om transaction, which is in turn used by the error-handling logic of the plumbing."}, initialize-global-error-callback {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 184, :column 7, :end-line 184, :end-column 39, :arglists (quote ([app]))}, :name untangled.client.impl.application/initialize-global-error-callback, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 39, :method-params ([app]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app]))}, enqueue {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 24, :column 8, :end-line 24, :end-column 15, :private true, :arglists (quote ([q v])), :doc "Enqueue a send to the network queue. This is a standalone function because we cannot mock core async functions."}, :private true, :name untangled.client.impl.application/enqueue, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 15, :method-params ([q v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([q v])), :doc "Enqueue a send to the network queue. This is a standalone function because we cannot mock core async functions."}, sweep-one {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 105, :column 7, :end-line 105, :end-column 16, :arglists (quote ([m])), :doc "Remove not-found keys from m (non-recursive)"}, :name untangled.client.impl.application/sweep-one, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Remove not-found keys from m (non-recursive)"}, server-send {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 70, :column 7, :end-line 70, :end-column 18, :arglists (quote ([app remote-tx-map cb])), :doc "Puts queries/mutations (and their corresponding callbacks) onto the send queue. The networking code will pull these\n  off one at a time and send them through the real networking layer. Reads are guaranteed to *follow* writes."}, :name untangled.client.impl.application/server-send, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 18, :method-params ([app remote-tx-map cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app remote-tx-map cb])), :doc "Puts queries/mutations (and their corresponding callbacks) onto the send queue. The networking code will pull these\n  off one at a time and send them through the real networking layer. Reads are guaranteed to *follow* writes."}, sweep {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 112, :column 7, :end-line 112, :end-column 12, :arglists (quote ([m])), :doc "Remove all of the not-found keys (recursively) from v, stopping at marked leaves (if present)"}, :name untangled.client.impl.application/sweep, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 12, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Remove all of the not-found keys (recursively) from v, stopping at marked leaves (if present)"}, real-send {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([net tx on-load on-error])), :doc "Do a properly-plumbed network send. This function recursively strips ui attributes from the tx and pushes the tx over\n  the network. It installs the given on-load and on-error handlers to deal with the network response."}, :name untangled.client.impl.application/real-send, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 16, :method-params ([net tx on-load on-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 4, :fn-var true, :arglists (quote ([net tx on-load on-error])), :doc "Do a properly-plumbed network send. This function recursively strips ui attributes from the tx and pushes the tx over\n  the network. It installs the given on-load and on-error handlers to deal with the network response."}, enqueue-reads {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 49, :column 7, :end-line 49, :end-column 20, :arglists (quote ([{:keys [queue reconciler networking]}])), :doc "Finds any loads marked `parallel` and triggers real network requests immediately. Remaining loads\n  are pulled into a single fetch payload (combined into one query) and enqueued behind any prior mutations/reads that\n  were already requested in a prior UI/event cycle. Thus non-parallel reads are processed in clusters grouped due to UI\n  events (a single event might trigger many reads which will all go to the server as a single combined request).\n  Further UI events that trigger remote interaction will end up waiting until prior network request(s) are complete.\n\n  This ensures that default reasoning is simple and sequential in the face of optimistic UI updates (real network\n  traffic characteristics could cause out of order processing, and you would not want\n  a 'create list' to be processed on the server *after* an 'add an item to the list'). "}, :name untangled.client.impl.application/enqueue-reads, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 20, :method-params ([p__43966]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [queue reconciler networking]}])), :doc "Finds any loads marked `parallel` and triggers real network requests immediately. Remaining loads\n  are pulled into a single fetch payload (combined into one query) and enqueued behind any prior mutations/reads that\n  were already requested in a prior UI/event cycle. Thus non-parallel reads are processed in clusters grouped due to UI\n  events (a single event might trigger many reads which will all go to the server as a single combined request).\n  Further UI events that trigger remote interaction will end up waiting until prior network request(s) are complete.\n\n  This ensures that default reasoning is simple and sequential in the face of optimistic UI updates (real network\n  traffic characteristics could cause out of order processing, and you would not want\n  a 'create list' to be processed on the server *after* an 'add an item to the list'). "}, merge-handler {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 136, :column 7, :end-line 136, :end-column 20, :arglists (quote ([mutation-merge target source]))}, :name untangled.client.impl.application/merge-handler, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 20, :method-params ([mutation-merge target source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mutation-merge target source]))}, generate-reconciler {:protocol-inline nil, :meta {:file "/Users/michaelgough/untangled-cookbook/recipes/websockets/resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :line 150, :column 7, :end-line 150, :end-column 26, :arglists (quote ([{:keys [queue mutation-merge], :as app} initial-state parser {:keys [pathopt migrate shared], :or {pathopt true, migrate nil, shared nil}}])), :doc "The reconciler's send method calls UntangledApplication/server-send, which itself requires a reconciler with a\n  send method already defined. This creates a catch-22 / circular dependency on the reconciler and :send field within\n  the reconciler.\n\n  To resolve the issue, we def an atom pointing to the reconciler that the send method will deref each time it is\n  called. This allows us to define the reconciler with a send method that, at the time of initialization, has an app\n  that points to a nil reconciler. By the end of this function, the app's reconciler reference has been properly set."}, :name untangled.client.impl.application/generate-reconciler, :variadic false, :file "resources/public/js/compiled/dev/untangled/client/impl/application.cljs", :end-column 26, :method-params ([p__44297 initial-state parser p__44298]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [queue mutation-merge], :as app} initial-state parser {:keys [pathopt migrate shared], :or {pathopt true, migrate nil, shared nil}}])), :doc "The reconciler's send method calls UntangledApplication/server-send, which itself requires a reconciler with a\n  send method already defined. This creates a catch-22 / circular dependency on the reconciler and :send field within\n  the reconciler.\n\n  To resolve the issue, we def an atom pointing to the reconciler that the send method will deref each time it is\n  called. This allows us to define the reconciler with a send method that, at the time of initialization, has an app\n  that points to a nil reconciler. By the end of this function, the app's reconciler reference has been properly set."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.next, om.next om.next}, :cljs.analyzer/constants {:seen #{:remote :tempids :pathopt :networking :response-channel :mutation-merge :else :locale :callback-args :queue :migrate :reconciler :on-load :ui/locale :recur :state :global-error-callback :parser :untangled/server-error :send :shared :merge-tree :complete :on-error :untangled.client.impl.om-plumbing/not-found :query :normalize}, :order [:reconciler :untangled/server-error :recur :else :queue :remote :query :on-load :on-error :networking :callback-args :response-channel :complete :locale :untangled.client.impl.om-plumbing/not-found :tempids :mutation-merge :pathopt :migrate :shared :ui/locale :state :send :normalize :merge-tree :parser :global-error-callback]}, :doc nil}